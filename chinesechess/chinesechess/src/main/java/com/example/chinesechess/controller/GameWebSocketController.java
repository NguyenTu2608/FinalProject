package com.example.chinesechess.controller;

import com.example.chinesechess.DTO.GameRequest;
import com.example.chinesechess.DTO.MoveDTO;
import com.example.chinesechess.model.Game;
import com.example.chinesechess.service.GameService;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Controller;

import java.util.Optional;

@Controller
public class GameWebSocketController {

    private final GameService gameService;

    public GameWebSocketController(GameService gameService) {
        this.gameService = gameService;
    }

    /**
     * X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i tham gia v√†o ph√≤ng game.
     * Client g·ª≠i l√™n `/app/game/{gameId}/join`, Server s·∫Ω broadcast ƒë·∫øn `/topic/game/{gameId}`
     */
    @MessageMapping("/game/{gameId}/join")
    @SendTo("/topic/game/{gameId}")
    public Game joinGame(@DestinationVariable String gameId, @Payload GameRequest request) {
        Optional<Game> optionalGame = gameService.getGameById(gameId);
        if (optionalGame.isEmpty()) {
            throw new RuntimeException("‚ùå Game kh√¥ng t·ªìn t·∫°i!");
        }

        Game game = optionalGame.get();

        // ‚úÖ N·∫øu ch∆∞a c√≥ playerBlack, g√°n ng∆∞·ªùi ch∆°i ƒë·∫ßu ti√™n l√†m playerBlack
        if (game.getPlayerBlack() == null) {
            game.setPlayerBlack(request.getPlayerBlack());
        } else if (game.getPlayerRed() == null && !game.getPlayerBlack().equals(request.getPlayerBlack())) {
            game.setPlayerRed(request.getPlayerRed());
        }

        System.out.println("üì© Ng∆∞·ªùi ch∆°i tham gia ph√≤ng: Black=" + game.getPlayerBlack() + ", Red=" + game.getPlayerRed());

        return game; // ‚úÖ G·ª≠i l·∫°i th√¥ng tin game
    }


    /**
     * X·ª≠ l√Ω n∆∞·ªõc ƒëi c·ªßa ng∆∞·ªùi ch∆°i.
     * Client g·ª≠i n∆∞·ªõc ƒëi l√™n `/app/game/{gameId}/move`, Server s·∫Ω g·ª≠i l·∫°i c·∫≠p nh·∫≠t cho `/topic/game/{gameId}`
     */
    @MessageMapping("/game/{gameId}/move")
    @SendTo("/topic/game/{gameId}")
    public Game makeMove(@DestinationVariable String gameId, @Payload MoveDTO move) {
        Optional<Game> optionalGame = gameService.getGameById(gameId);
        if (optionalGame.isEmpty()) {
            throw new RuntimeException("‚ùå Game kh√¥ng t·ªìn t·∫°i!");
        }

        Game game = optionalGame.get();

        // Ki·ªÉm tra ng∆∞·ªùi ch∆°i h·ª£p l·ªá
        if (!move.getPlayer().equals(game.getPlayerBlack()) && !move.getPlayer().equals(game.getPlayerRed())) {
            throw new IllegalArgumentException("‚ùå Ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá!");
        }

        // Ki·ªÉm tra l∆∞·ª£t ch∆°i
        if (!move.getPlayer().equals(game.getCurrentTurn())) {
            throw new IllegalArgumentException("‚ùå Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!");
        }

        // L∆∞u n∆∞·ªõc ƒëi v√†o danh s√°ch l·ªãch s·ª≠
        game.getMoves().add(move);

        // Chuy·ªÉn l∆∞·ª£t sau khi ƒëi
        game.switchTurn();

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i game
        gameService.updateGame(game);

        return game; // ‚úÖ G·ª≠i l·∫°i to√†n b·ªô tr·∫°ng th√°i game cho c·∫£ hai ng∆∞·ªùi ch∆°i
    }
}
