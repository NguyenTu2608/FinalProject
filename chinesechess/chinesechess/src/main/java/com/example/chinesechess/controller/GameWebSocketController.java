package com.example.chinesechess.controller;

import com.example.chinesechess.DTO.GameRequest;
import com.example.chinesechess.DTO.MoveDTO;
import com.example.chinesechess.model.Game;
import com.example.chinesechess.service.GameService;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Controller
public class GameWebSocketController {

    private final GameService gameService;
    private final SimpMessagingTemplate messagingTemplate; // ‚úÖ Khai b√°o bi·∫øn

    // üî• D√πng constructor ƒë·ªÉ kh·ªüi t·∫°o messagingTemplate
    public GameWebSocketController(GameService gameService, SimpMessagingTemplate messagingTemplate) {
        this.gameService = gameService;
        this.messagingTemplate = messagingTemplate;
    }

    @MessageMapping("/game/join")
    public void joinGame(@Payload Map<String, Object> request) {
        System.out.println("üì© Nh·∫≠n y√™u c·∫ßu tham gia game v·ªõi ID: " + request);

        String gameId = (String) request.get("gameId");
        String playerUsername = (String) request.get("player");  // üî• ƒê·∫£m b·∫£o nh·∫≠n ƒë√∫ng key t·ª´ FE

        Optional<Game> optionalGame = gameService.getGameById(gameId);
        if (optionalGame.isEmpty()) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y gameId = " + gameId);
            throw new RuntimeException("‚ùå Game kh√¥ng t·ªìn t·∫°i!");
        }

        Game game = optionalGame.get();

        // üèÜ N·∫øu ch∆∞a c√≥ playerBlack, g√°n ng∆∞·ªùi ƒë·∫ßu ti√™n v√†o
        if (game.getPlayerBlack() == null) {
            game.setPlayerBlack(playerUsername);
        }
        // üèÜ N·∫øu ƒë√£ c√≥ playerBlack nh∆∞ng ch∆∞a c√≥ playerRed, g√°n ng∆∞·ªùi th·ª© hai v√†o
        else if (game.getPlayerRed() == null && !game.getPlayerBlack().equals(playerUsername)) {
            game.setPlayerRed(playerUsername);
        }
        else {
            System.out.println("‚ö† Ng∆∞·ªùi ch∆°i ƒë√£ c√≥ trong ph√≤ng ho·∫∑c kh√¥ng h·ª£p l·ªá!");
        }

        gameService.updateGame(game);

        System.out.println("‚úÖ C·∫≠p nh·∫≠t ng∆∞·ªùi ch∆°i: Black=" + game.getPlayerBlack() + ", Red=" + game.getPlayerRed());

        // üèÜ G·ª≠i c·∫≠p nh·∫≠t v·ªÅ WebSocket cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
        Map<String, Object> response = new HashMap<>();
        response.put("type", "playerUpdate");
        response.put("gameId", gameId);
        response.put("playerBlack", game.getPlayerBlack());
        response.put("playerRed", game.getPlayerRed());

        messagingTemplate.convertAndSend("/topic/game/" + gameId, response);
    }

    @MessageMapping("/game/{gameId}/move")
    public void handleMove(@DestinationVariable String gameId, @Payload Map<String, Object> moveData) {
        System.out.println("üì© Nh·∫≠n n∆∞·ªõc ƒëi t·ª´ WebSocket: " + moveData);

        // G·ª≠i l·∫°i n∆∞·ªõc ƒëi cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng
        moveData.put("type", "gameMove");
        moveData.put("gameId", gameId);

        messagingTemplate.convertAndSend("/topic/game/" + gameId, moveData);
        System.out.println("‚úÖ G·ª≠i n∆∞·ªõc ƒëi t·ªõi WebSocket: " + moveData);
    }



    /**
     * X·ª≠ l√Ω n∆∞·ªõc ƒëi c·ªßa ng∆∞·ªùi ch∆°i.
     * Client g·ª≠i n∆∞·ªõc ƒëi l√™n `/app/game/{gameId}/move`, Server s·∫Ω g·ª≠i l·∫°i c·∫≠p nh·∫≠t cho `/topic/game/{gameId}`
     */
    @MessageMapping("/game/{gameId}/move")
    @SendTo("/topic/game/{gameId}")
    public Game makeMove(@DestinationVariable String gameId, @Payload MoveDTO move) {
        Optional<Game> optionalGame = gameService.getGameById(gameId);
        if (optionalGame.isEmpty()) {
            throw new RuntimeException("‚ùå Game kh√¥ng t·ªìn t·∫°i!");
        }

        Game game = optionalGame.get();

        // Ki·ªÉm tra ng∆∞·ªùi ch∆°i h·ª£p l·ªá
        if (!move.getPlayer().equals(game.getPlayerBlack()) && !move.getPlayer().equals(game.getPlayerRed())) {
            throw new IllegalArgumentException("‚ùå Ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá!");
        }

        // Ki·ªÉm tra l∆∞·ª£t ch∆°i
        if (!move.getPlayer().equals(game.getCurrentTurn())) {
            throw new IllegalArgumentException("‚ùå Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!");
        }

        // L∆∞u n∆∞·ªõc ƒëi v√†o danh s√°ch l·ªãch s·ª≠
        game.getMoves().add(move);

        // Chuy·ªÉn l∆∞·ª£t sau khi ƒëi
        game.switchTurn();

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i game
        gameService.updateGame(game);

        return game; // ‚úÖ G·ª≠i l·∫°i to√†n b·ªô tr·∫°ng th√°i game cho c·∫£ hai ng∆∞·ªùi ch∆°i
    }
}
