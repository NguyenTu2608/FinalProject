import SockJS from "sockjs-client";
import { Client } from "@stomp/stompjs";

class WebSocketService {
  constructor() {
    this.client = null;
    this.isConnected = false;
    this.subscriptions = {}; // ‚úÖ L∆∞u danh s√°ch c√°c subscriptions
  }

  connect(callback) {
    if (this.client && this.isConnected) {
      console.log("‚ö† WebSocket ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi!");
      return;
    }

    const socket = new SockJS("http://localhost:8080/ws");
    this.client = new Client({
      webSocketFactory: () => socket,
      reconnectDelay: 5000,
      onConnect: () => {
        console.log("‚úÖ WebSocket Connected!");
        this.isConnected = true; // ‚úÖ ƒê√°nh d·∫•u WebSocket ƒë√£ k·∫øt n·ªëi
        if (callback) callback();
      },
      onStompError: (frame) => {
        console.error("‚ùå WebSocket Error:", frame);
        this.isConnected = false; // ‚ùå N·∫øu c√≥ l·ªói, ƒë√°nh d·∫•u m·∫•t k·∫øt n·ªëi
      },
    });

    this.client.activate();
  }

  disconnect() {
    if (this.client) {
      Object.values(this.subscriptions).forEach((sub) => sub.unsubscribe()); // ‚úÖ H·ªßy t·∫•t c·∫£ subscriptions
      this.subscriptions = {}; // ‚úÖ X√≥a danh s√°ch subscription
      this.client.deactivate();
      console.log("üîå WebSocket Disconnected!");
      this.isConnected = false;
      this.client = null;
    }
  }

  subscribeToGame(gameId, callback) {
    console.log("‚úÖ G·ªçi subscribeToGame v·ªõi gameId:", gameId);

    if (!this.isConnected) {
      console.warn("‚ö† WebSocket ch∆∞a k·∫øt n·ªëi, th·ª≠ l·∫°i sau...");
      setTimeout(() => this.subscribeToGame(gameId, callback), 500); // ‚úÖ Th·ª≠ l·∫°i sau 500ms
      return;
    }

    const subscription = this.client.subscribe(`/topic/game/${gameId}`, (message) => {
      callback(JSON.parse(message.body));
    });

    this.subscriptions[gameId] = subscription;
    console.log("‚úÖ ƒê√£ subscribe th√†nh c√¥ng v√†o game:", gameId);
  }


  unsubscribeFromGame(gameId) {
    if (this.subscriptions[gameId]) {
      this.subscriptions[gameId].unsubscribe();
      delete this.subscriptions[gameId]; // ‚úÖ X√≥a kh·ªèi danh s√°ch subscription
      console.log(`üîï Unsubscribed from game ${gameId}`);
    }
  }

  sendJoinRequest(gameId, username) {
    if (!this.client || !this.client.connected) {
      console.warn("‚ö† WebSocket ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu tham gia!");
      return;
    }

    this.client.publish({
      destination: `/app/game/${gameId}/join`,
      body: JSON.stringify({ playerBlack: username }),
    });
  }

  sendMove(gameId, move) {
    if (!this.client || !this.client.connected) {
      console.warn("‚ö† WebSocket ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ g·ª≠i n∆∞·ªõc ƒëi!");
      return;
    }

    this.client.publish({
      destination: `/app/game/${gameId}/move`,
      body: JSON.stringify(move),
    });
  }
}

const websocketService = new WebSocketService();
export default websocketService;
