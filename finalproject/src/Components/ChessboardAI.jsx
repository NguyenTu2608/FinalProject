import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useLocation } from "react-router-dom";
import GameManager from "./GameManager";

const pieceImages = {
  r: "/Assets/red-rook.png",
  n: "/Assets/red-knight.png",
  b: "/Assets/red-bishop.png",
  a: "/Assets/red-advisor.png",
  k: "/Assets/red-king.png",
  c: "/Assets/red-cannon.png",
  p: "/Assets/red-pawn.png",
  R: "/Assets/black-rook.png",
  N: "/Assets/black-knight.png",
  B: "/Assets/black-bishop.png",
  A: "/Assets/black-advisor.png",
  K: "/Assets/black-king.png",
  C: "/Assets/black-cannon.png",
  P: "/Assets/black-pawn.png",
};

const initialBoard = [
  ["r", "n", "b", "a", "k", "a", "b", "n", "r"],
  ["", "", "", "", "", "", "", "", ""],
  ["", "c", "", "", "", "", "", "c", ""],
  ["p", "", "p", "", "p", "", "p", "", "p"],
  ["", "", "", "", "", "", "", "", ""],
  ["", "", "", "", "", "", "", "", ""],
  ["P", "", "P", "", "P", "", "P", "", "P"],
  ["", "C", "", "", "", "", "", "C", ""],
  ["", "", "", "", "", "", "", "", ""],
  ["R", "N", "B", "A", "K", "A", "B", "N", "R"],
];

const ChessboardAI = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const queryParams = new URLSearchParams(location.search);

  const mode = queryParams.get("mode") || "easy";
  const playerColor = queryParams.get("color") || "black";
  const aiColor = playerColor === "black" ? "red" : "black";

  const [board, setBoard] = useState(initialBoard);
  const [selectedPiece, setSelectedPiece] = useState(null);
  const [validMoves, setValidMoves] = useState([]);
  const [gameOver, setGameOver] = useState(false);
  const [winner, setWinner] = useState(null);
  const [errorMessage, setErrorMessage] = useState("");
  const [currentTurn, setCurrentTurn] = useState("black"); // ƒêen ƒëi tr∆∞·ªõc

  const gameManager = new GameManager(board);

  // N·∫øu AI l√† ƒêen, n√≥ s·∫Ω ƒëi tr∆∞·ªõc khi game b·∫Øt ƒë·∫ßu
  useEffect(() => {
    if (currentTurn === aiColor) {
      handleAIMove();
    }
  }, [currentTurn]);
    let aiDifficulty = mode;

    const handleAIMove = () => {
        switch(aiDifficulty) {
            case "easy":
                handleAIMoveEasy();
                break;
            case "medium":
                handleAIMoveMedium();
                break;
            case "hard":
                handleAIMoveHard();
                break;
            default:
                handleAIMoveEasy();
        }
    };


  // X·ª≠ l√Ω n∆∞·ªõc ƒëi c·ªßa AI mode Easy (ch·ªçn ng·∫´u nhi√™n t·ª´ danh s√°ch n∆∞·ªõc h·ª£p l·ªá)
  const handleAIMoveEasy = () => {
    if (gameOver || currentTurn !== aiColor) return;

    let possibleMoves = [];
    let captureMoves = []; // L∆∞u c√°c n∆∞·ªõc c√≥ th·ªÉ ƒÉn qu√¢n
    let centerMoves = [];  // L∆∞u c√°c n∆∞·ªõc gi√∫p AI ki·ªÉm so√°t b√†n c·ªù
    let escapeMoves = []; // N∆∞·ªõc ƒëi gi√∫p AI tho√°t kh·ªèi chi·∫øu
    let checkmateMoves = []; // L∆∞u c√°c n∆∞·ªõc ƒëi c√≥ th·ªÉ chi·∫øu b√≠
    

    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i ch·ªâ c√≤n T∆∞·ªõng
    const isPlayerOnlyKing = (playerColor === "red" && board.flat().filter(piece => piece === "k").length === 1) || 
                             (playerColor === "black" && board.flat().filter(piece => piece === "K").length === 1);

    for (let row = 0; row < 10; row++) {
        for (let col = 0; col < 9; col++) {
            const piece = board[row][col];
            if (piece && ((aiColor === "black" && piece === piece.toUpperCase()) || 
                          (aiColor === "red" && piece === piece.toLowerCase()))) {
                const moves = gameManager.getValidMoves(piece, row, col);
                moves.forEach(([toRow, toCol]) => {
                    const targetPiece = board[toRow][toCol];

                    // Ki·ªÉm tra xem n∆∞·ªõc ƒëi c√≥ g√¢y ra chi·∫øu t∆∞·ªõng cho AI kh√¥ng
                    if (!gameManager.isMoveCausingCheck(row, col, toRow, toCol, aiColor === "red")) {
                        // Ki·ªÉm tra n·∫øu n∆∞·ªõc ƒëi n√†y c√≥ th·ªÉ t·∫°o ra chi·∫øu b√≠
                        const isCheckmate = gameManager.isCheckmate(aiColor === "red");
                        // Ki·ªÉm tra chi·∫øu b√≠: N·∫øu n∆∞·ªõc ƒëi n√†y c√≥ th·ªÉ chi·∫øu b√≠ ƒë·ªëi ph∆∞∆°ng
                        if (isCheckmate) {
                            // N·∫øu c√≥ th·ªÉ chi·∫øu b√≠, l∆∞u n∆∞·ªõc ƒëi n√†y
                            checkmateMoves.push({ fromRow: row, fromCol: col, toRow, toCol });
                        } else {
                            // N·∫øu n∆∞·ªõc ƒëi kh√¥ng g√¢y chi·∫øu t∆∞·ªõng cho AI, chia c√°c n∆∞·ªõc ƒëi theo m·ª•c ƒë√≠ch
                            if ((toRow >= 3 && toRow <= 6) && (toCol >= 3 && toCol <= 5)) {
                                centerMoves.push({ fromRow: row, fromCol: col, toRow, toCol });
                            }
                            else if (targetPiece && targetPiece !== "") {
                                captureMoves.push({ fromRow: row, fromCol: col, toRow, toCol });
                            } else {
                                possibleMoves.push({ fromRow: row, fromCol: col, toRow, toCol });
                            }
                        }
                    }
                });
            }
        }
    }

    // üî• N·∫øu AI ƒëang b·ªã chi·∫øu, ch·ªâ ch·ªçn n∆∞·ªõc gi√∫p tho√°t chi·∫øu
    if (gameManager.isKingInCheck(aiColor === "red")) {
        setErrorMessage("‚ö† AI ƒëang b·ªã chi·∫øu!");
        setTimeout(() => setErrorMessage(""), 2000);

        escapeMoves = possibleMoves.filter(move =>
            !gameManager.isMoveCausingCheck(move.fromRow, move.fromCol, move.toRow, move.toCol, aiColor === "red")
        );

        if (escapeMoves.length > 0) {
            possibleMoves = escapeMoves;
        }
    }

    let chosenMove = null;
    // N·∫øu ng∆∞·ªùi ch∆°i ch·ªâ c√≤n T∆∞·ªõng, ki·ªÉm tra n·∫øu AI c√≥ th·ªÉ chi·∫øu b√≠ ngay
    if (isPlayerOnlyKing) {
        // Ki·ªÉm tra xem T∆∞·ªõng c·ªßa ng∆∞·ªùi ch∆°i c√≥ b·ªã chi·∫øu t∆∞·ªõng kh√¥ng
        const opponentKingPosition = gameManager.isKingInCheck(playerColor === "red");

        // N·∫øu T∆∞·ªõng c·ªßa ng∆∞·ªùi ch∆°i kh√¥ng th·ªÉ di chuy·ªÉn v√†o √¥ an to√†n, l√† chi·∫øu b√≠
        const playerKingMoves = gameManager.getValidMoves("k", opponentKingPosition.row, opponentKingPosition.col); // T√¨m c√°c n∆∞·ªõc ƒëi c·ªßa T∆∞·ªõng ng∆∞·ªùi ch∆°i
        const isPlayerCheckmated = playerKingMoves.every(([r, c]) => 
            gameManager.isMoveCausingCheck(opponentKingPosition.row, opponentKingPosition.col, r, c, playerColor === "red")
        );

        if (isPlayerCheckmated) {
            console.log("ü§ñ AI x√°c nh·∫≠n chi·∫øu b√≠!");
            checkmateMoves = possibleMoves; // ƒê·∫∑t t·∫•t c·∫£ c√°c n∆∞·ªõc ƒëi v√†o checkmateMoves ƒë·ªÉ ch·ªçn
        }
    }
    // ∆Øu ti√™n ch·ªçn chi·∫øu b√≠ tr∆∞·ªõc n·∫øu c√≥
    if (checkmateMoves.length > 0) {
        chosenMove = checkmateMoves[Math.floor(Math.random() * checkmateMoves.length)];
        console.log("ü§ñ AI ch·ªçn n∆∞·ªõc ƒëi CHI·∫æU B√ç:", chosenMove);
    } else if (captureMoves.length > 0) {
        chosenMove = captureMoves[Math.floor(Math.random() * captureMoves.length)];
        console.log("ü§ñ AI ch·ªçn n∆∞·ªõc ƒëi ƒÇN QU√ÇN:", chosenMove);
    } else if (centerMoves.length > 0) {
        chosenMove = centerMoves[Math.floor(Math.random() * centerMoves.length)];
        console.log("ü§ñ AI ch·ªçn n∆∞·ªõc ƒëi KI·ªÇM SO√ÅT B√ÄN C·ªú:", chosenMove);
    } else if (possibleMoves.length > 0) {
        chosenMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
        console.log("ü§ñ AI ch·ªçn n∆∞·ªõc ƒëi TH√îNG TH∆Ø·ªúNG:", chosenMove);
    }

    if (chosenMove) {
        const newBoard = gameManager.movePiece(chosenMove.fromRow, chosenMove.fromCol, chosenMove.toRow, chosenMove.toCol);
        if (!newBoard) {
            console.error("‚ùå L·ªói: movePiece tr·∫£ v·ªÅ undefined!");
            return;
        }
        setBoard(newBoard);
        setCurrentTurn(playerColor); // Chuy·ªÉn l∆∞·ª£t v·ªÅ ng∆∞·ªùi ch∆°i

        // üî• Ki·ªÉm tra ngay sau n∆∞·ªõc ƒëi c·ªßa AI
        setTimeout(() => {
        if (gameManager.isKingInCheck(playerColor === "red")) {
            setErrorMessage("‚ö† C·∫£nh b√°o: B·∫°n ƒëang b·ªã chi·∫øu!");
        }
        if (gameManager.isCheckmate(playerColor === "red")) {
            setErrorMessage("‚ùå B·∫°n ƒë√£ b·ªã chi·∫øu b√≠! Tr√≤ ch∆°i k·∫øt th√∫c.");
            setWinner(aiColor); // AI th·∫Øng
            setGameOver(true); // K·∫øt th√∫c game
        }
        }, 200); // ƒê·ª£i 0.2s ƒë·ªÉ UI c·∫≠p nh·∫≠t tr∆∞·ªõc
        // X√≥a th√¥ng b√°o sau v√†i gi√¢y
        setTimeout(() => setErrorMessage(""), 5000);
    }
  };



  const getAllValidMoves = () => {
    let moves = [];

    console.log("üéØ aiColor hi·ªán t·∫°i:", aiColor);

    if (!Array.isArray(board) || board.length !== 10 || board[0].length !== 9) {
        console.error("‚ùå L·ªñI: Board kh√¥ng ph·∫£i l√† m·∫£ng 10x9 h·ª£p l·ªá!", board);
        return [];
    }

    for (let row = 0; row < 10; row++) {
        for (let col = 0; col < 9; col++) {
            const piece = board[row][col];
            if (!piece) continue; // √î tr·ªëng th√¨ b·ªè qua

            // Ki·ªÉm tra qu√¢n c·ªù c√≥ ph·∫£i c·ªßa AI kh√¥ng
            if ((aiColor === "black" && piece === piece.toUpperCase()) ||
                (aiColor === "red" && piece === piece.toLowerCase())) {

                    const validMoves = gameManager.getValidMoves(piece, row, col);
                    if (validMoves.length === 0) {
                        console.warn(`‚ö† Kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá cho qu√¢n ${piece} t·∫°i (${row}, ${col})`);
                    } else {
                        validMoves.forEach(([toRow, toCol]) => {
                            if (toRow < 0 || toRow >= 10 || toCol < 0 || toCol >= 9) {
                                console.error(`‚ùå N∆∞·ªõc ƒëi ${toRow}, ${toCol} kh√¥ng h·ª£p l·ªá.`);
                            }
                        });
                    }
                    

                validMoves.forEach(([toRow, toCol]) => {
                    const isCausingCheck = gameManager.isMoveCausingCheck(row, col, toRow, toCol, aiColor === "red");

                    console.log(`üîç X√©t n∆∞·ªõc ƒëi (${row},${col}) ‚Üí (${toRow},${toCol}) | G√¢y chi·∫øu: ${isCausingCheck}`);

                    if (!isCausingCheck) {
                        moves.push({ fromRow: row, fromCol: col, toRow, toCol });
                    }
                });
            }
        }
    }

    console.log(`‚úÖ AI (${aiColor}) c√≥ ${moves.length} n∆∞·ªõc ƒëi h·ª£p l·ªá:`, moves);
    return moves;
};





const evaluateBoard = (board, aiColor) => {
    let score = 0;
    const pieceValues = {
        "p": 10, "c": 30, "m": 30, "x": 20, "s": 20, "j": 90, "k": 1000, // Qu√¢n ƒê·ªè
        "P": 10, "C": 30, "M": 30, "X": 20, "S": 20, "J": 90, "K": 1000  // Qu√¢n ƒêen
    };

    for (let row = 0; row < 10; row++) {
        for (let col = 0; col < 9; col++) {
            const piece = board[row][col];
            if (piece) {
                let value = pieceValues[piece] || 0;
                if ((aiColor === "black" && piece === piece.toUpperCase()) ||
                    (aiColor === "red" && piece === piece.toLowerCase())) {
                    score += value; // AI c√≥ ƒëi·ªÉm c·ªông
                } else {
                    score -= value; // Ng∆∞·ªùi ch∆°i c√≥ ƒëi·ªÉm tr·ª´
                }
            }
        }
    }
    return score;
};

const minimax = (boardState, depth, isMaximizing, aiColor, alpha, beta) => {
    if (depth === 0 || gameManager.isCheckmate(aiColor === "red")) {
        let score = evaluateBoard(boardState, aiColor);
        console.log(`üéØ ƒêi·ªÉm c·ªßa b√†n c·ªù (depth ${depth}):`, score);
        return score;
    }

    const moves = getAllValidMoves(boardState, isMaximizing ? aiColor : (aiColor === "red" ? "black" : "red"));
    console.log(`üöÄ C√≥ ${moves.length} n∆∞·ªõc ƒëi kh·∫£ thi ·ªü depth ${depth}`);

    if (moves.length === 0) {
        console.warn("‚ö† Kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá!");
        return isMaximizing ? -9999 : 9999;
    }

    if (isMaximizing) {
        let bestScore = -Infinity;
        for (const move of moves) {
            let newBoard = JSON.parse(JSON.stringify(boardState));
            gameManager.movePiece(newBoard, move.fromRow, move.fromCol, move.toRow, move.toCol);
            let score = minimax(newBoard, depth - 1, false, aiColor, alpha, beta);
            bestScore = Math.max(bestScore, score);
            alpha = Math.max(alpha, score);
            if (beta <= alpha) break;
        }
        return bestScore;
    } else {
        let bestScore = Infinity;
        for (const move of moves) {
            let newBoard = JSON.parse(JSON.stringify(boardState));
            gameManager.movePiece(newBoard, move.fromRow, move.fromCol, move.toRow, move.toCol);
            let score = minimax(newBoard, depth - 1, true, aiColor, alpha, beta);
            bestScore = Math.min(bestScore, score);
            beta = Math.min(beta, score);
            if (beta <= alpha) break;
        }
        return bestScore;
    }
};



//xu ly AI che do kho
const handleAIMoveMedium = () => {
    if (gameOver || currentTurn !== aiColor) return;

    console.log("ü§ñ AI (Medium) ƒëang t√≠nh to√°n n∆∞·ªõc ƒëi...");

    let possibleMoves = [];
    let captureMoves = [];
    let centerMoves = [];

    const isPlayerOnlyKing = (playerColor === "red" && board.flat().filter(piece => piece === "k").length === 1) || 
                             (playerColor === "black" && board.flat().filter(piece => piece === "K").length === 1);

    for (let row = 0; row < 10; row++) {
        for (let col = 0; col < 9; col++) {
            const piece = board[row][col];
            if (piece && ((aiColor === "black" && piece === piece.toUpperCase()) || 
                          (aiColor === "red" && piece === piece.toLowerCase()))) {
                const moves = gameManager.getValidMoves(piece, row, col);
                moves.forEach(([toRow, toCol]) => {
                    const targetPiece = board[toRow][toCol];

                    // N·∫øu c√≥ th·ªÉ ƒÉn qu√¢n, ∆∞u ti√™n n∆∞·ªõc n√†y
                    if (targetPiece && targetPiece !== "") {
                        captureMoves.push({ fromRow: row, fromCol: col, toRow, toCol });
                    }
                    // N·∫øu di chuy·ªÉn v·ªÅ gi·ªØa b√†n c·ªù (chi·∫øn thu·∫≠t c∆° b·∫£n)
                    else if ((toRow >= 3 && toRow <= 6) && (toCol >= 3 && toCol <= 5)) {
                        centerMoves.push({ fromRow: row, fromCol: col, toRow, toCol });
                    } 
                    // N·∫øu kh√¥ng th√¨ ƒë∆∞a v√†o danh s√°ch n∆∞·ªõc ƒëi th√¥ng th∆∞·ªùng
                    else {
                        possibleMoves.push({ fromRow: row, fromCol: col, toRow, toCol });
                    }
                });
            }
        }
    }

    // ∆Øu ti√™n c√°c n∆∞·ªõc ƒëi ƒÉn qu√¢n ƒë·ªëi th·ªß, sau ƒë√≥ l√† ki·ªÉm so√°t trung t√¢m
    let chosenMove = null;
    if (captureMoves.length > 0) {
        chosenMove = captureMoves[Math.floor(Math.random() * captureMoves.length)];
    } else if (centerMoves.length > 0) {
        chosenMove = centerMoves[Math.floor(Math.random() * centerMoves.length)];
    } else if (possibleMoves.length > 0) {
        chosenMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
    }

    if (chosenMove) {
        const newBoard = gameManager.movePiece(chosenMove.fromRow, chosenMove.fromCol, chosenMove.toRow, chosenMove.toCol);
        setBoard(newBoard);
        setCurrentTurn(playerColor); // ƒê·∫øn l∆∞·ª£t ng∆∞·ªùi ch∆°i
    }
};


  
//xu li AI che do sieu kho
const handleAIMoveHard = () => {
    if (gameOver || currentTurn !== aiColor) return;

    console.log(`üî• AI (${aiColor}) ƒëang suy nghƒ©...`);

    let bestMove = null;
    let bestScore = -Infinity;
    const moves = getAllValidMoves(board, aiColor);

    if (moves.length === 0) {
        console.warn(`‚ö† AI (${aiColor}) kh√¥ng c√≥ n∆∞·ªõc ƒëi n√†o!`);
        return;
    }

    for (const move of moves) {
        let newBoard = JSON.parse(JSON.stringify(board));
        gameManager.movePiece(newBoard, move.fromRow, move.fromCol, move.toRow, move.toCol);
        let score = minimax(newBoard, 1, false, aiColor, -Infinity, Infinity);

        if (score > bestScore) {
            bestScore = score;
            bestMove = move;
        }
    }

    if (bestMove) {
        console.log("ü§ñ AI ch·ªçn n∆∞·ªõc ƒëi:", bestMove);
        const newBoard = gameManager.movePiece(bestMove.fromRow, bestMove.fromCol, bestMove.toRow, bestMove.toCol);
        setBoard(newBoard);
        setCurrentTurn(playerColor);

        if (gameManager.isCheckmate(playerColor === "red")) {
            setErrorMessage("‚ùå B·∫°n ƒë√£ b·ªã chi·∫øu b√≠! Tr√≤ ch∆°i k·∫øt th√∫c.");
            setWinner(aiColor);
            setGameOver(true);
        }
    }
};





  // X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i ch·ªçn qu√¢n c·ªù ho·∫∑c di chuy·ªÉn
  const handleClick = (row, col) => {
    if (gameOver) return;
    console.log(`üéØ Clicked position: (${row}, ${col})`);
    console.log("üìå Qu√¢n c·ªù t·∫°i v·ªã tr√≠:", board?.[row]?.[col]);

    if (currentTurn !== playerColor) return;
    const isPlayerInCheck = gameManager.isKingInCheck(playerColor === "red");
    const piece = board[row][col];

    // 2Ô∏è‚É£ N·∫øu ch·ªçn qu√¢n c·ªù h·ª£p l·ªá (c√πng m√†u v·ªõi ng∆∞·ªùi ch∆°i)
    if (piece && ((playerColor === "black" && piece === piece.toUpperCase()) || 
                  (playerColor === "red" && piece === piece.toLowerCase()))) {
        console.log("‚úÖ Qu√¢n c·ªù h·ª£p l·ªá:", piece);
        setSelectedPiece({ row, col });
        const validMoves = gameManager.getValidMoves(piece, row, col);
        setValidMoves(validMoves);
        console.log("üìå N∆∞·ªõc ƒëi h·ª£p l·ªá:", validMoves);
        return;
    }

    // 3Ô∏è‚É£ N·∫øu ƒë√£ ch·ªçn qu√¢n c·ªù v√† b·∫•m v√†o v·ªã tr√≠ h·ª£p l·ªá
    if (selectedPiece) {
        const { row: fromRow, col: fromCol } = selectedPiece;
        
        // Ki·ªÉm tra n∆∞·ªõc ƒëi c√≥ h·ª£p l·ªá kh√¥ng
        const isValidMove = validMoves.some(([r, c]) => r === row && c === col);
        if (validMoves) {
            if (gameManager.isMoveCausingCheck(selectedPiece.row, selectedPiece.col, row, col, currentTurn === "red")) {
              setErrorMessage("Kh√¥ng th·ªÉ ƒëi n∆∞·ªõc ƒëi n√†y h√£y ki·ªÉm tra l·∫°i t∆∞·ªõng c·ªßa b·∫°n !");
              return; // Kh√¥ng th·ª±c hi·ªán n∆∞·ªõc ƒëi
            }
        }
        // N·∫øu ƒëang b·ªã chi·∫øu, l·ªçc ra c√°c n∆∞·ªõc ƒëi h·ª£p l·ªá gi√∫p tho√°t chi·∫øu
        if (isPlayerInCheck) {
            if (validMoves.length === 0) {
                alert("‚ùå B·∫°n ƒëang b·ªã chi·∫øu b√≠! Tr√≤ ch∆°i k·∫øt th√∫c.");
                return;
            }
        }
        console.log("üìå Move valid?", isValidMove);

        if (isValidMove) {
            // Th·ª±c hi·ªán di chuy·ªÉn
            const newBoard = gameManager.movePiece(fromRow, fromCol, row, col);
            if (!newBoard) {
                console.error("‚ùå L·ªói: movePiece tr·∫£ v·ªÅ undefined!");
                return;
            }
            setBoard(newBoard);
            setSelectedPiece(null);
            setValidMoves([]);

            // üî• Ki·ªÉm tra n·∫øu AI b·ªã chi·∫øu t∆∞·ªõng
            if (gameManager.isKingInCheck(aiColor === "red")) {
                setErrorMessage("‚ö† AI ƒëang b·ªã chi·∫øu!");
                setTimeout(() => setErrorMessage(""), 2000);
            }

            // üî• Ki·ªÉm tra n·∫øu AI b·ªã chi·∫øu b√≠ (t·ª©c l√† AI kh√¥ng c√≥ n∆∞·ªõc ƒëi n√†o h·ª£p l·ªá)
            if (gameManager.isCheckmate(aiColor === "red")) {
                setErrorMessage("üéâ Ch√∫c m·ª´ng b·∫°n chi·∫øn th·∫Øng ! AI b·ªã chi·∫øu b√≠ !");
                setWinner(playerColor); // player th·∫Øng
                setGameOver(true); // K·∫øt th√∫c game
                return;
            }

            

            setCurrentTurn(aiColor); // ƒê·∫øn l∆∞·ª£t AI
            setErrorMessage("");

            setTimeout(() => handleAIMove(), 5000); // AI ƒëi sau 0.5s
        } else {
            setErrorMessage("N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá!");
            setTimeout(() => setErrorMessage(""), 1500);
        }
    }
};

const resetGame = () => {
    setBoard(initialBoard);  // Reset l·∫°i b√†n c·ªù
    setCurrentTurn("black");   // M·∫∑c ƒë·ªãnh qu√¢n ƒë·ªè ƒëi tr∆∞·ªõc
    setSelectedPiece(null);
    setValidMoves([]);
    setErrorMessage("");
    setWinner(null);
    setGameOver(false);      // ƒê·∫∑t l·∫°i tr·∫°ng th√°i game
};



  const boardSize = 500;
  const cellSize = boardSize / 9;

  return (
    <div className="flex flex-col items-center">
    <h1 className="text-4xl font-bold text-center text-[#003366] mb-2">
        Ch·∫ø ƒë·ªô: {mode.toUpperCase()}
    </h1>
    <h2 className="text-2xl font-semibold text-center text-gray-700 mb-4">
        B·∫°n ch∆°i: {playerColor === "black" ? "‚ôüÔ∏è ƒêen (ƒêi tr∆∞·ªõc)" : "‚ôüÔ∏è ƒê·ªè"}
    </h2>

    <div className="relative w-[500px] h-[550px]">
        <img src="/Assets/chessboard.png" alt="Chessboard" className="w-full h-full" />
        {board.map((row, rowIndex) =>
          row.map((piece, colIndex) =>
            piece ? (
              <img
                key={`${rowIndex}-${colIndex}`}
                src={pieceImages[piece]}
                alt={piece}
                className="absolute w-[45px] h-[45px] transform -translate-x-1/2 -translate-y-1/2 cursor-pointer"
                style={{
                  left: `${colIndex * cellSize + cellSize / 2}px`,
                  top: `${rowIndex * cellSize + cellSize / 2}px`,
                }}
                onClick={() => handleClick(rowIndex, colIndex)}
              />
            ) : null
          )
        )}

        {validMoves.map(([row, col]) => (
          <div
            key={`${row}-${col}`}
            className="absolute w-[45px] h-[45px] bg-green-500 opacity-50 transform -translate-x-1/2 -translate-y-1/2 rounded-full"
            style={{
              left: `${col * cellSize + cellSize / 2}px`,
              top: `${row * cellSize + cellSize / 2}px`,
            }}
            onClick={() => handleClick(row, col)}
          />
        ))}
        {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói */}
        {errorMessage && (
        <div
          className="absolute left-1/2 transform -translate-x-1/2 bg-red-500 text-white p-2 rounded"
          style={{
            top: "100%", // ƒê∆∞a th√¥ng b√°o xu·ªëng d∆∞·ªõi b√†n c·ªù
            marginTop: "10px", // T·∫°o kho·∫£ng c√°ch gi·ªØa b√†n c·ªù v√† th√¥ng b√°o
          }}
        >
        {errorMessage}
        </div>
        )}
        {gameOver && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-60">
            <div className="bg-white p-6 rounded-2xl shadow-lg text-center w-80">
            <h2 className={`text-2xl font-bold ${winner === playerColor ? "text-green-600" : "text-red-600"}`}>
            {winner === playerColor ? "üéâ B·∫°n th·∫Øng!" : "üòî B·∫°n thua!"}
            </h2>
            <p className="text-gray-700 mt-2">Tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c.</p>
            <button 
                onClick={resetGame} 
                className="mt-4 px-5 py-2 bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-lg shadow-md transition duration-200"
            >
                üîÑ Ch∆°i l·∫°i
            </button>
            
        </div>
    </div>
    )}
    </div>
    <button
        onClick={() => navigate("/Training/ChooseAI")} // Quay l·∫°i trang tr∆∞·ªõc
        className="absolute bottom-5 left-5 px-6 py-3 bg-red-500 rounded-full text-lg font-semibold hover:bg-red-700 transition"
      >
        ‚¨Ö Quay l·∫°i
    </button>
</div>

  );
};


export default ChessboardAI;


