class GameManager {
  constructor(board) {
    this.board = board; // Nh·∫≠n b√†n c·ªù t·ª´ Chessboard
  }

  // L·∫•y danh s√°ch c√°c n∆∞·ªõc ƒëi h·ª£p l·ªá
  getValidMoves(piece, row, col) {
    if (!piece) return []; // ‚úÖ Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ qu√¢n c·ªù

    const moves = [];
    const isRed = piece === piece.toLowerCase(); // X√°c ƒë·ªãnh qu√¢n ƒë·ªè hay ƒëen

    console.log("‚ôü X·ª≠ l√Ω n∆∞·ªõc ƒëi cho:", piece, " t·∫°i v·ªã tr√≠ (", row, ",", col, ")");

    switch (piece.toLowerCase()) {
        case "p": // üõ† T·ªët (Pawn)
            if (isRed) {
                if (row < 9 && this.canMove(row + 1, col, isRed)) moves.push([row + 1, col]); // ƒêi l√™n
                if (row >= 5) { // Qua s√¥ng c√≥ th·ªÉ ƒëi ngang
                    if (col > 0 && this.canMove(row, col - 1, isRed)) moves.push([row, col - 1]); // Tr√°i
                    if (col < 8 && this.canMove(row, col + 1, isRed)) moves.push([row, col + 1]); // Ph·∫£i
                }
            } else {
                if (row > 0 && this.canMove(row - 1, col, isRed)) moves.push([row - 1, col]); // ƒêi xu·ªëng
                if (row <= 4) { // Qua s√¥ng c√≥ th·ªÉ ƒëi ngang
                    if (col > 0 && this.canMove(row, col - 1, isRed)) moves.push([row, col - 1]); // Tr√°i
                    if (col < 8 && this.canMove(row, col + 1, isRed)) moves.push([row, col + 1]); // Ph·∫£i
                }
            }
            break;
        case "r": // üè∞ Xe (Rook)
            this.addLinearMoves(moves, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);
            break;

        case "c": // üî• Ph√°o (Cannon)
            this.addCannonMoves(moves, row, col);
            break;

        case "n": // üê¥ M√£ (Knight)
            this.addKnightMoves(moves, row, col, isRed);
            break;

        case "b": // üé≠ T∆∞·ª£ng (Bishop)
            this.addBishopMoves(moves, row, col, isRed);
            break;

        case "a": // üèØ Sƒ© (Advisor)
            console.log("üìç Qu√¢n Sƒ© t·∫°i:", row, col);
            this.addAdvisorMoves(moves, row, col, isRed);
            break;

        case "k": // üëë T∆∞·ªõng (King)
            this.addKingMoves(moves, row, col, isRed);
            break;

        default:
            console.warn("‚ö† Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c qu√¢n c·ªù:", piece);
            break;
    }

    console.log("‚úÖ N∆∞·ªõc ƒëi h·ª£p l·ªá:", moves);
    return moves;
}

canMove(row, col, isRed) {
  if (row < 0 || row >= 10 || col < 0 || col >= 9) return false; // ‚úÖ Ki·ªÉm tra gi·ªõi h·∫°n b√†n c·ªù
  const targetPiece = this.board[row][col];

  if (!targetPiece) return true; // ‚úÖ N·∫øu √¥ tr·ªëng, c√≥ th·ªÉ ƒëi

  if (typeof targetPiece !== "string") {
      console.warn("‚ö† targetPiece kh√¥ng h·ª£p l·ªá t·∫°i", row, col, ":", targetPiece);
      return false;
  }

  const isTargetRed = targetPiece.toUpperCase() !== targetPiece; // ‚úÖ Ki·ªÉm tra qu√¢n c·ªù c√≥ ph·∫£i c·ªßa ƒê·ªè kh√¥ng
  return isRed !== isTargetRed; // ‚úÖ Ch·ªâ c√≥ th·ªÉ ƒëi n·∫øu l√† qu√¢n ƒë·ªãch
}

  addLinearMoves(moves, row, col, directions) {
    directions.forEach(([rowStep, colStep]) => {
        let r = row + rowStep;
        let c = col + colStep;

        while (r >= 0 && r < 10 && c >= 0 && c < 9) {
            const targetPiece = this.board[r][c];

            if (!targetPiece) { // ‚úÖ N·∫øu √¥ tr·ªëng, c√≥ th·ªÉ ƒëi ti·∫øp
                moves.push([r, c]);
            } else {
                const currentPiece = this.board[row][col];

                // ‚úÖ Ki·ªÉm tra n·∫øu `currentPiece` ho·∫∑c `targetPiece` l√† null tr∆∞·ªõc khi g·ªçi `.toUpperCase()`
                if (currentPiece && targetPiece) {
                    const isEnemy = (targetPiece.toUpperCase() !== targetPiece) !== (currentPiece.toUpperCase() !== currentPiece);
                    if (isEnemy) moves.push([r, c]);
                }
                
                break; // G·∫∑p qu√¢n c·ªù th√¨ d·ª´ng l·∫°i
            }

            r += rowStep;
            c += colStep;
        }
    });
}
  addCannonMoves(moves, row, col) {
    const directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]; // C√°c h∆∞·ªõng di chuy·ªÉn

    directions.forEach(([rowStep, colStep]) => {
        let r = row + rowStep;
        let c = col + colStep;
        let jumped = false; // Theo d√µi xem ƒë√£ nh·∫£y qua qu√¢n c·ªù n√†o ch∆∞a

        while (r >= 0 && r < 10 && c >= 0 && c < 9) {
            const targetPiece = this.board[r][c];

            if (!targetPiece) {
                // N·∫øu √¥ tr·ªëng v√† ch∆∞a nh·∫£y qua qu√¢n c·∫£n, cho ph√©p ƒëi ti·∫øp
                if (!jumped) moves.push([r, c]);
            } else {
                if (!jumped) {
                    // N·∫øu g·∫∑p qu√¢n c·ªù ƒë·∫ßu ti√™n, ƒë√°nh d·∫•u ƒë√£ nh·∫£y
                    jumped = true;
                } else {
                    // N·∫øu ƒë√£ nh·∫£y qua 1 qu√¢n, ki·ªÉm tra xem c√≥ th·ªÉ ƒÉn kh√¥ng
                    const currentPiece = this.board[row][col];
                    const isEnemy = currentPiece && targetPiece &&
                                    (targetPiece.toUpperCase() !== targetPiece) !== (currentPiece.toUpperCase() !== currentPiece);
                    if (isEnemy) moves.push([r, c]);
                    break; // D·ª´ng l·∫°i v√¨ kh√¥ng th·ªÉ ƒëi ti·∫øp sau khi ƒÉn qu√¢n
                }
            }

            r += rowStep;
            c += colStep;
        }
    });
}



  // // Di chuy·ªÉn M√£ (Knight)
  // addKnightMoves(moves, row, col, isRed) {
  //   const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];
  //   knightMoves.forEach(([dr, dc]) => {
  //     const r = row + dr;
  //     const c = col + dc;
  //     if (this.canMove(r, c, isRed)) { // Truy·ªÅn tham s·ªë isRed
  //       moves.push([r, c]);
  //     }
  //   });
  // }

  addKnightMoves(moves, row, col, isRed) {
    const knightMoves = [
        [-2, -1], [-2, 1], [2, -1], [2, 1],
        [-1, -2], [-1, 2], [1, -2], [1, 2]
    ];

    knightMoves.forEach(([dr, dc]) => {
        const r = row + dr;
        const c = col + dc;

        // Ki·ªÉm tra n·∫øu r, c n·∫±m ngo√†i bi√™n c·ªßa b√†n c·ªù (10x9)
        if (r < 0 || r >= 10 || c < 0 || c >= 9) return;

        // Ki·ªÉm tra qu√¢n c·∫£n (ch·ªâ c√≥ th·ªÉ ƒëi khi kh√¥ng c√≥ qu√¢n c·∫£n)
        const midRow = row + Math.sign(dr);  // √î gi·ªØa theo h∆∞·ªõng d·ªçc
        const midCol = col + Math.sign(dc);  // √î gi·ªØa theo h∆∞·ªõng ngang

        if ((Math.abs(dr) === 2 && this.board[midRow]?.[col] !== "") || 
            (Math.abs(dc) === 2 && this.board[row]?.[midCol] !== "")) {
            return; // N·∫øu c√≥ qu√¢n c·∫£n th√¨ kh√¥ng th·ªÉ ƒëi
        }

        // N·∫øu kh√¥ng b·ªã c·∫£n, ki·ªÉm tra xem c√≥ th·ªÉ ƒëi ƒë·∫øn ƒë√≥ kh√¥ng
        if (this.canMove(r, c, isRed)) {
            moves.push([r, c]);
        }
    });
}



  // Di chuy·ªÉn T∆∞·ª£ng (Bishop)
  addBishopMoves(moves, row, col, isRed) {
    const bishopMoves = [
      [-2, -2], // L√™n tr√°i
      [-2, 2],  // L√™n ph·∫£i
      [2, -2],  // Xu·ªëng tr√°i
      [2, 2]    // Xu·ªëng ph·∫£i
    ];

    for (let i = 0; i < bishopMoves.length; i++) {
      const [dr, dc] = bishopMoves[i];
      const r = row + dr; // H√†ng ƒë√≠ch
      const c = col + dc; // C·ªôt ƒë√≠ch

      // Ki·ªÉm tra xem v·ªã tr√≠ ƒë√≠ch c√≥ n·∫±m trong cung c·ªßa b√™n m√¨nh kh√¥ng
      if (isRed) {
        // Qu√¢n ƒë·ªè: cung t·ª´ h√†ng 0 ƒë·∫øn h√†ng 4
        if (r < 0 || r > 4 || c < 0 || c > 8) continue; // B·ªè qua n·∫øu ngo√†i ph·∫°m vi
      } else {
        // Qu√¢n ƒëen: cung t·ª´ h√†ng 5 ƒë·∫øn h√†ng 9
        if (r < 5 || r > 9 || c < 0 || c > 8) continue; // B·ªè qua n·∫øu ngo√†i ph·∫°m vi
      }

      // Ki·ªÉm tra "m·∫Øt T∆∞·ª£ng": √¥ gi·ªØa ƒë∆∞·ªùng ƒëi ph·∫£i tr·ªëng
      const midRow = row + dr / 2;
      const midCol = col + dc / 2;
      if (this.board[midRow][midCol] !== "") continue; // C√≥ qu√¢n ch·∫∑n, kh√¥ng th·ªÉ ƒëi

      // Ki·ªÉm tra qu√¢n ƒë·ªãch t·∫°i v·ªã tr√≠ ƒë√≠ch
      if (this.canMove(r, c, isRed)) {
        moves.push([r, c]);
      }
    }
  }

  // // Di chuy·ªÉn Sƒ© (Advisor)
  // addAdvisorMoves(moves, row, col, isRed) {
  //   // Ph·∫°m vi cung c·ªßa m·ªói b√™n
  //   const palaceRows = isRed ? [7, 9] : [0, 2]; // Qu√¢n ƒë·ªè ·ªü h√†ng 7-9, qu√¢n ƒëen ·ªü h√†ng 0-2
  //   const palaceCols = [3, 5]; // Cung n·∫±m gi·ªØa c·ªôt 3-5

  //   // C√°c h∆∞·ªõng di chuy·ªÉn ch√©o c·ªßa Sƒ©
  //   const advisorMoves = [
  //     [-1, -1], // L√™n tr√°i
  //     [-1, 1],  // L√™n ph·∫£i
  //     [1, -1],  // Xu·ªëng tr√°i
  //     [1, 1]    // Xu·ªëng ph·∫£i
  //   ];

  //   // Duy·ªát qua c√°c h∆∞·ªõng di chuy·ªÉn
  //   advisorMoves.forEach(([dr, dc]) => {
  //     const r = row + dr; // H√†ng ƒë√≠ch
  //     const c = col + dc; // C·ªôt ƒë√≠ch

  //     // Ki·ªÉm tra xem v·ªã tr√≠ ƒë√≠ch c√≥ n·∫±m trong cung kh√¥ng
  //     if (
  //       r >= palaceRows[0] && r <= palaceRows[1] && // Ki·ªÉm tra h√†ng
  //       c >= palaceCols[0] && c <= palaceCols[1]    // Ki·ªÉm tra c·ªôt
  //     ) {
  //       // Ki·ªÉm tra xem c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn √¥ ƒë√≠ch kh√¥ng
  //       if (this.canMove(r, c, isRed)) {
  //         moves.push([r, c]);
  //       }
  //     }
  //   });
  // }
  // Di chuy·ªÉn Sƒ© (Advisor) 
  addAdvisorMoves(moves, row, col, isRed) {
    // Ph·∫°m vi cung c·ªßa m·ªói b√™n
    const palaceRows = !isRed ? [7, 8, 9] : [0, 1, 2]; // ƒê·ªè: h√†ng 7-9, ƒêen: h√†ng 0-2
    const palaceCols = [3, 4, 5]; // Cung n·∫±m gi·ªØa c·ªôt 3-5

    // C√°c h∆∞·ªõng di chuy·ªÉn ch√©o c·ªßa Sƒ©
    const advisorMoves = [
      [-1, -1], // L√™n tr√°i
      [-1, 1],  // L√™n ph·∫£i
      [1, -1],  // Xu·ªëng tr√°i
      [1, 1]    // Xu·ªëng ph·∫£i
    ];

    // Duy·ªát qua c√°c h∆∞·ªõng di chuy·ªÉn
    advisorMoves.forEach(([dr, dc]) => {
      const r = row + dr; // H√†ng ƒë√≠ch
      const c = col + dc; // C·ªôt ƒë√≠ch

      // Ki·ªÉm tra xem v·ªã tr√≠ ƒë√≠ch c√≥ n·∫±m trong cung kh√¥ng
      if (palaceRows.includes(r) && palaceCols.includes(c)) {
        // Ki·ªÉm tra xem c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn √¥ ƒë√≠ch kh√¥ng
        if (this.board[r][c] === "" || this.isOpponentPiece(r, c, isRed)) {
          moves.push([r, c]);
        }
      }
    });
  }

  // H√†m ki·ªÉm tra qu√¢n ƒë·ªëi ph∆∞∆°ng
  isOpponentPiece(row, col, isRed) {
    const piece = this.board[row][col];
    if (!piece) return false; // √î tr·ªëng kh√¥ng ph·∫£i qu√¢n ƒë·ªëi ph∆∞∆°ng
    const isPieceRed = piece === piece.toLowerCase(); // Qu√¢n ƒë·ªè l√† ch·ªØ th∆∞·ªùng
    return isPieceRed !== isRed; // N·∫øu kh√°c m√†u => l√† qu√¢n ƒë·ªëi ph∆∞∆°ng
  }


  // Di chuy·ªÉn T∆∞·ªõng (King)
  addKingMoves(moves, row, col, isRed) {
    // Ph·∫°m vi cung c·ªßa m·ªói b√™n
    const palaceRows = !isRed ? [7, 8, 9] : [0, 1, 2]; // ƒê·ªè: h√†ng 7-9, ƒêen: h√†ng 0-2
    const palaceCols = [3, 4, 5]; // Cung n·∫±m gi·ªØa c·ªôt 3-5

    // C√°c h∆∞·ªõng di chuy·ªÉn c·ªßa T∆∞·ªõng (ngang v√† d·ªçc)
    const kingMoves = [
      [-1, 0], // L√™n
      [1, 0],  // Xu·ªëng
      [0, -1], // Sang tr√°i
      [0, 1]   // Sang ph·∫£i
    ];

    // Duy·ªát qua c√°c h∆∞·ªõng di chuy·ªÉn
    kingMoves.forEach(([dr, dc]) => {
      const r = row + dr; // H√†ng ƒë√≠ch
      const c = col + dc; // C·ªôt ƒë√≠ch

      // Ki·ªÉm tra xem v·ªã tr√≠ ƒë√≠ch c√≥ n·∫±m trong cung kh√¥ng
      if (palaceRows.includes(r) && palaceCols.includes(c)) {
        // Ki·ªÉm tra xem c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn √¥ ƒë√≠ch kh√¥ng
        if (this.board[r][c] === "" || this.isOpponentPiece(r, c, isRed)) {
          moves.push([r, c]);
        }
      }
    });

    // Ki·ªÉm tra ƒë·ªëi m·∫∑t tr·ª±c ti·∫øp v·ªõi T∆∞·ªõng ƒë·ªëi ph∆∞∆°ng (t√πy ch·ªçn)
    // this.checkFaceToFaceKing(moves, row, col, isRed);
  }

  // H√†m ki·ªÉm tra ƒë·ªëi m·∫∑t tr·ª±c ti·∫øp v·ªõi T∆∞·ªõng ƒë·ªëi ph∆∞∆°ng
  // checkFaceToFaceKing(moves, row, col, isRed) {
  //   console.log('chekc')
  //   const kingRow = isRed ? 7 : 2; // H√†ng c·ªßa T∆∞·ªõng ƒë·ªëi ph∆∞∆°ng
  //   let hasObstacle = false;

  //   // Duy·ªát t·ª´ h√†ng hi·ªán t·∫°i ƒë·∫øn h√†ng c·ªßa T∆∞·ªõng ƒë·ªëi ph∆∞∆°ng
  //   for (let r = row + 1; r <= kingRow; r++) {
  //     if (this.board[r][col] !== "") {
  //       if (this.board[r][col].toLowerCase() === "k") {
  //         // N·∫øu g·∫∑p T∆∞·ªõng ƒë·ªëi ph∆∞∆°ng m√† kh√¥ng c√≥ qu√¢n ch·∫∑n
  //         if (!hasObstacle) {
  //           // Lo·∫°i b·ªè n∆∞·ªõc ƒëi th·∫≥ng l√™n ho·∫∑c xu·ªëng (t√πy thu·ªôc v√†o lu·∫≠t ch∆°i)
  //           moves = moves.filter(([moveRow, moveCol]) => moveCol !== col);
  //         }
  //         break;
  //       } else {
  //         hasObstacle = true; // C√≥ qu√¢n ch·∫∑n
  //       }
  //     }
  //   }
  // }

  // C·∫≠p nh·∫≠t b√†n c·ªù khi qu√¢n c·ªù di chuy·ªÉn
  movePiece(fromRow, fromCol, toRow, toCol) {
    const newBoard = this.board.map(row => [...row]);
    const movingPiece = newBoard[fromRow][fromCol];
    const targetPiece = newBoard[toRow][toCol];

    if (targetPiece !== "" && this.canMove(toRow, toCol, movingPiece === movingPiece.toUpperCase())) {
    }

    newBoard[toRow][toCol] = movingPiece;
    newBoard[fromRow][fromCol] = "";
    this.board = newBoard;
    return newBoard;
  }
  

  // Ki·ªÉm tra xem T∆∞·ªõng c·ªßa m·ªôt b√™n c√≥ ƒëang b·ªã chi·∫øu hay kh√¥ng
  isKingInCheck(isRed) {
    const kingSymbol = isRed ? "k" : "K"; // K√Ω hi·ªáu c·ªßa T∆∞·ªõng
    let kingPosition = null;

    // T√¨m v·ªã tr√≠ c·ªßa T∆∞·ªõng
    for (let row = 0; row < 10; row++) {
      for (let col = 0; col < 9; col++) {
        if (this.board[row][col] === kingSymbol) {
          kingPosition = { row, col };
          break;
        }
      }
      if (kingPosition) break;
    }

    if (!kingPosition) return false; // Kh√¥ng t√¨m th·∫•y T∆∞·ªõng (tr∆∞·ªùng h·ª£p kh√¥ng x·∫£y ra)

    // Ki·ªÉm tra xem c√≥ qu√¢n c·ªù n√†o c·ªßa ƒë·ªëi ph∆∞∆°ng c√≥ th·ªÉ ƒÉn T∆∞·ªõng kh√¥ng
    for (let row = 0; row < 10; row++) {
      for (let col = 0; col < 9; col++) {
        const piece = this.board[row][col];
        if (piece && (piece === piece.toLowerCase()) !== isRed) {
          // N·∫øu l√† qu√¢n c·ªßa ƒë·ªëi ph∆∞∆°ng
          const validMoves = this.getValidMoves(piece, row, col);
          if (validMoves.some(([r, c]) => r === kingPosition.row && c === kingPosition.col)) {
            return true; // T∆∞·ªõng b·ªã chi·∫øu
          }
        }
      }
    }

    return false; // T∆∞·ªõng kh√¥ng b·ªã chi·∫øu
    
  }
  simulateMove(fromRow, fromCol, toRow, toCol) {
    const newBoard = this.board.map(row => [...row]); // T·∫°o b·∫£n sao c·ªßa b√†n c·ªù
    const movingPiece = newBoard[fromRow][fromCol];
    newBoard[toRow][toCol] = movingPiece; // Di chuy·ªÉn qu√¢n c·ªù
    newBoard[fromRow][fromCol] = ""; // X√≥a qu√¢n c·ªù ·ªü v·ªã tr√≠ c≈©
    return newBoard;
  }
  isMoveCausingCheck(fromRow, fromCol, toRow, toCol, isRed) {
    const simulatedBoard = this.simulateMove(fromRow, fromCol, toRow, toCol); // Gi·∫£ l·∫≠p n∆∞·ªõc ƒëi
    const tempGameManager = new GameManager(simulatedBoard); // T·∫°o GameManager t·∫°m th·ªùi v·ªõi b√†n c·ªù gi·∫£ l·∫≠p
    return tempGameManager.isKingInCheck(isRed); // Ki·ªÉm tra xem T∆∞·ªõng c√≥ b·ªã chi·∫øu hay kh√¥ng
  }
  
  isCheckmate(isRed) {
    if (!this.isKingInCheck(isRed)) return false; // N·∫øu kh√¥ng b·ªã chi·∫øu th√¨ kh√¥ng ph·∫£i chi·∫øu b√≠

    // const kingSymbol = isRed ? "k" : "K";
    // let kingPosition = null;

    // Duy·ªát qua t·∫•t c·∫£ c√°c qu√¢n c·ªù c·ªßa b√™n isRed
    for (let row = 0; row < 10; row++) {
      for (let col = 0; col < 9; col++) {
        const piece = this.board[row][col];
        // Ki·ªÉm tra n·∫øu qu√¢n n√†y thu·ªôc b√™n isRed (ƒë·ªëi v·ªõi qu√¢n ƒë·ªè, piece l√† ch·ªØ th∆∞·ªùng)
        if (piece && ((piece === piece.toLowerCase()) === isRed)) {
          // L·∫•y danh s√°ch c√°c n∆∞·ªõc ƒëi h·ª£p l·ªá c·ªßa qu√¢n ƒë√≥
          const validMoves = this.getValidMoves(piece, row, col);
          for (const [r, c] of validMoves) {
            // Gi·∫£ l·∫≠p n∆∞·ªõc ƒëi n√†y m√† kh√¥ng l√†m thay ƒë·ªïi b√†n c·ªù g·ªëc
            const simulatedBoard = this.simulateMove(row, col, r, c);
            const tempGameManager = new GameManager(simulatedBoard);
            // N·∫øu sau khi th·ª±c hi·ªán n∆∞·ªõc ƒëi, T∆∞·ªõng kh√¥ng c√≤n b·ªã chi·∫øu, t·ª©c l√† c√≥ th·ªÉ tho√°t chi·∫øu
            if (!tempGameManager.isKingInCheck(isRed)) {
              return false;
            }
          }
        }
      }
    }
    // N·∫øu kh√¥ng c√≥ n∆∞·ªõc ƒëi n√†o c·ª©u ƒë∆∞·ª£c T∆∞·ªõng, tr·∫£ v·ªÅ true (chi·∫øu b√≠)
    return true;
  }
}



export default GameManager;

