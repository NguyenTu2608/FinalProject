import React, { useState, useEffect } from "react";
import GameManager from "./GameManager";
import apiClient from "../Services/apiConfig";
import websocketService from "../Services/webSocketServices";
// ·∫¢nh qu√¢n c·ªù
const pieceImages = {
  r: "/Assets/red-rook.png",
  n: "/Assets/red-knight.png",
  b: "/Assets/red-bishop.png",
  a: "/Assets/red-advisor.png",
  k: "/Assets/red-king.png",
  c: "/Assets/red-cannon.png",
  p: "/Assets/red-pawn.png",
  R: "/Assets/black-rook.png",
  N: "/Assets/black-knight.png",
  B: "/Assets/black-bishop.png",
  A: "/Assets/black-advisor.png",
  K: "/Assets/black-king.png",
  C: "/Assets/black-cannon.png",
  P: "/Assets/black-pawn.png",
};
// B√†n c·ªù kh·ªüi t·∫°o
const initialBoard = [
  ["r", "n", "b", "a", "k", "a", "b", "n", "r"],
  ["", "", "", "", "", "", "", "", ""],
  ["", "c", "", "", "", "", "", "c", ""],
  ["p", "", "p", "", "p", "", "p", "", "p"],
  ["", "", "", "", "", "", "", "", ""],
  ["", "", "", "", "", "", "", "", ""],
  ["P", "", "P", "", "P", "", "P", "", "P"],
  ["", "C", "", "", "", "", "", "C", ""],
  ["", "", "", "", "", "", "", "", ""],
  ["R", "N", "B", "A", "K", "A", "B", "N", "R"],
];
const Chessboard = ({ gameId, playerBlack, playerRed, gameMode, username }) => {
  const [gameStarted, setGameStarted] = useState(false);
  const [board, setBoard] = useState(initialBoard);
  const [selectedPiece, setSelectedPiece] = useState(null);
  const [validMoves, setValidMoves] = useState([]);
  const [moveHistory, setMoveHistory] = useState([]);
  const [currentPlayer, setCurrentPlayer] = useState("black"); // 'red' ho·∫∑c 'black'
  const [errorMessage, setErrorMessage] = useState(""); // Th√¥ng b√°o l·ªói
  const [gameOver, setGameOver] = useState(false);
  const [winner, setWinner] = useState(null);
  const gameManager = new GameManager(board);

  useEffect(() => {
    if (gameMode !== "online") return;

    console.log("üì° K·∫øt n·ªëi WebSocket ƒë·ªÉ nh·∫≠n n∆∞·ªõc ƒëi...");

    websocketService.subscribeToGame(gameId, (message) => {
      if (message.type === "gameMove") {
        console.log("‚ôüÔ∏è Nh·∫≠n gameMove t·ª´ WebSocket:", message);

        setBoard((prevBoard) => {

          if (!message.from || !message.to) {
              console.warn("‚ö† L·ªói: D·ªØ li·ªáu n∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá!", message);
              return prevBoard;
          }
      
          const { from, to } = message;
      
          // Ki·ªÉm tra xem t·ªça ƒë·ªô c√≥ h·ª£p l·ªá kh√¥ng
          if (from.row < 0 || from.row >= 10 || from.col < 0 || from.col >= 9 ||
              to.row < 0 || to.row >= 10 || to.col < 0 || to.col >= 9) {
              console.warn("‚ö† L·ªói: N∆∞·ªõc ƒëi ngo√†i ph·∫°m vi b√†n c·ªù!", from, to);
              return prevBoard;
          }
      
          // T·∫°o b·∫£n sao s√¢u c·ªßa b√†n c·ªù
          const updatedBoard = prevBoard.map(row => [...row]);
      
          // Ki·ªÉm tra xem c√≥ qu√¢n c·ªù ·ªü v·ªã tr√≠ c≈© kh√¥ng
          if (!updatedBoard[from.row][from.col]) {
              console.warn("‚ö† Kh√¥ng t√¨m th·∫•y qu√¢n c·ªù ·ªü v·ªã tr√≠ c≈©:", from);
              return prevBoard;
          }
      
          // Th·ª±c hi·ªán n∆∞·ªõc ƒëi
          updatedBoard[to.row][to.col] = updatedBoard[from.row][from.col];
          updatedBoard[from.row][from.col] = null;
      
          return updatedBoard;
      });
      
  

        setMoveHistory((prevHistory) => [...prevHistory, message]);

        // üî• C·∫≠p nh·∫≠t l∆∞·ª£t ch∆°i t·ª´ WebSocket
        setCurrentPlayer((prev) => {
          console.log("üõ†Ô∏è Tr∆∞·ªõc khi c·∫≠p nh·∫≠t l∆∞·ª£t:", prev);
          console.log("üîÑ C·∫≠p nh·∫≠t l∆∞·ª£t ch∆°i th√†nh:", message.currentTurn);
          return message.currentTurn;
        });
      }
    });

    return () => {
      websocketService.unsubscribeFromGame(gameId);
    };
  }, [gameId, gameMode]);



  if (!gameStarted) {
    return (
      <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
        <div className="bg-white p-8 rounded-lg text-center animate-fade-in">
          {gameMode === "practice" ? (
            <button
              onClick={() => setGameStarted(true)}
              className="bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-8 rounded-full text-xl shadow-lg hover:shadow-xl"
            >
              B·∫•m ƒë·ªÉ b·∫Øt ƒë·∫ßu
            </button>
          ) : (
            <div>
              <p className="mb-4 text-lg font-semibold">ƒêang ch·ªù ng∆∞·ªùi ch∆°i kh√°c...</p>
              <button
                onClick={() => setGameStarted(true)}
                className="bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-8 rounded-full text-xl shadow-lg hover:shadow-xl"
              >
                S·∫µn s√†ng
              </button>
            </div>
          )}
        </div>
      </div>
    );
  }

  const handleClick = async (row, col) => {
    if (gameMode === "online") {
      // üî• Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i trong ch·∫ø ƒë·ªô online
      if ((currentPlayer === "black" && username !== playerBlack) ||
        (currentPlayer === "red" && username !== playerRed)) {
        console.log("üö´ Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!");
        setErrorMessage("Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!");
        setErrorMessage("");
        return;
      }


    }

    const piece = board[row][col];
    const isRedPiece = piece && piece === piece.toLowerCase(); // Qu√¢n ƒë·ªè l√† ch·ªØ th∆∞·ªùng
    const isBlackPiece = piece && piece === piece.toUpperCase(); // Qu√¢n ƒëen l√† ch·ªØ hoa
    if (selectedPiece) {
      if (validMoves.some(([r, c]) => r === row && c === col)) {
        if (gameManager.isMoveCausingCheck(selectedPiece.row, selectedPiece.col, row, col, currentPlayer === "red")) {
          setErrorMessage("N∆∞·ªõc ƒëi n√†y s·∫Ω g√¢y chi·∫øu t∆∞·ªõng!");
          return; // Kh√¥ng th·ª±c hi·ªán n∆∞·ªõc ƒëi
        }
        // Move the piece
        const newBoard = gameManager.movePiece(
          selectedPiece.row,
          selectedPiece.col,
          row,
          col
        );
        const move = {
          gameId,
          from: { row: selectedPiece.row, col: selectedPiece.col },
          to: { row, col },
          piece: selectedPiece.piece,
          player: currentPlayer,
        };
        // üì° G·ª≠i n∆∞·ªõc ƒëi l√™n server n·∫øu l√† ch·∫ø ƒë·ªô online
        if (gameMode === "online") {
          console.log("üì° G·ª≠i n∆∞·ªõc ƒëi qua WebSocket:", move);
          websocketService.sendMove(gameId, move);
        }

        try {
          await apiClient.post(`/games/${gameId}/moves`, move); // G·ª≠i n∆∞·ªõc ƒëi l√™n server
          console.log("Move successfully sent to server");
        } catch (error) {
          console.error("Failed to send move to server", error);
        }

        console.log("N∆∞·ªõc ƒëi m·ªõi:", move); // Ki·ªÉm tra log
        console.log("L·ªãch s·ª≠ n∆∞·ªõc ƒëi:", [...moveHistory, move]); // Ki·ªÉm tra to√†n b·ªô l·ªãch s·ª≠

        setMoveHistory(prevHistory => [...prevHistory, move]); // C·∫≠p nh·∫≠t l·ªãch s·ª≠


        // X√°c ƒë·ªãnh l∆∞·ª£t ch∆°i ti·∫øp theo
        const nextPlayer = currentPlayer === "red" ? "black" : "red";
        const newGameManager = new GameManager(newBoard);
        // Ki·ªÉm tra xem b√™n ƒë∆∞·ª£c chuy·ªÉn giao c√≥ b·ªã chi·∫øu b√≠ hay kh√¥ng
        if (newGameManager.isCheckmate(nextPlayer === "red")) {
          setGameOver(true);
          setWinner(nextPlayer);
          setErrorMessage(
            `${nextPlayer === "red" ? "ƒê·ªè" : "ƒêen"} b·ªã chi·∫øu b√≠! Tr√≤ ch∆°i k·∫øt th√∫c.`
          );
        }

        setBoard([...newBoard]); // Ensure a new state reference
        setSelectedPiece(null);
        setValidMoves([]);
        setErrorMessage("");

        // Ki·ªÉm tra xem T∆∞·ªõng c·ªßa ƒë·ªëi ph∆∞∆°ng c√≥ b·ªã chi·∫øu hay kh√¥ng
        const opponentIsRed = currentPlayer === "black";
        if (gameManager.isKingInCheck(opponentIsRed)) {
          setErrorMessage("Chi·∫øu t∆∞·ªõng!");
          // Ki·ªÉm tra xem c√≥ ph·∫£i l√† chi·∫øu b√≠ hay kh√¥ng
          if (gameManager.isCheckmate(opponentIsRed)) {
            setErrorMessage("Chi·∫øu b√≠! Tr√≤ ch∆°i k·∫øt th√∫c.");
            // C√≥ th·ªÉ th√™m logic k·∫øt th√∫c tr√≤ ch∆°i ·ªü ƒë√¢y
          }
        }
        if (!gameOver) setCurrentPlayer(nextPlayer);
      } else {
        setSelectedPiece(null);
        setValidMoves([]);
        // setErrorMessage("N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá!");
      }
    } else if (piece)
      if ((currentPlayer === "red" && isRedPiece) || (currentPlayer === "black" && isBlackPiece)) {

        const valid = gameManager.getValidMoves(piece, row, col);
        setSelectedPiece({ row, col, piece });
        setValidMoves(valid);
        setErrorMessage(""); // X√≥a th√¥ng b√°o l·ªói
      }
      else {
        // setErrorMessage("Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!");
      }
  };

  const restartGame = () => {
    setBoard(initialBoard);
    setCurrentPlayer(winner);
    setSelectedPiece(null);
    setValidMoves([]);
    setErrorMessage("");
    setGameOver(false);
    setWinner(null);
  };

  const boardSize = 500;
  const cellSize = boardSize / 9;

  const ProfileCard = () => {
    return (
      <div className="flex flex-col items-center bg-gray-900 bg-opacity-80 p-4 rounded-lg shadow-lg w-64 text-white">
        {/* ·∫¢nh ƒë·∫°i di·ªán */}
        <div className="relative">
          <img
            src="/Assets/avatar.png" // Thay b·∫±ng ·∫£nh th·ª±c t·∫ø
            alt="Avatar"
            className="w-24 h-24 rounded-full border-4 border-orange-500"
          />
          <div className="absolute -bottom-3 left-1/2 transform -translate-x-1/2 bg-orange-500 px-4 py-1 rounded-md text-lg font-bold">
            T·∫≠p s·ª±
            <span className="block text-center text-yellow-300 text-sm">‚≠ê</span>
          </div>
        </div>

        {/* M√£ ng∆∞·ªùi ch∆°i */}
        <div className="bg-gray-700 text-yellow-300 text-lg font-semibold mt-6 px-6 py-2 rounded-lg w-full text-center">
          917E7B212E...
        </div>

        {/* ƒê·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c */}
        <div className="flex items-center mt-4 bg-yellow-500 px-6 py-2 rounded-lg text-black font-bold">
          ‚è≥ 15:00
        </div>
      </div>
    );
  };

  // export default ProfileCard;

  return (
    <div className="flex justify-center items-center space-x-8">
      {/* ProfileCard */}
      <ProfileCard />
      <div className="relative w-[500px] h-[550px] mx-auto">
        <img src="/Assets/chessboard.png" alt="Chessboard" className="w-full h-full" />

        {board.map((row, rowIndex) =>
          row.map((piece, colIndex) =>
            piece ? (
              <img
                key={`${rowIndex}-${colIndex}`}
                src={pieceImages[piece]}
                alt={piece}
                className="absolute w-[45px] h-[45px] transform -translate-x-1/2 -translate-y-1/2 cursor-pointer"
                style={{
                  left: `${colIndex * cellSize + cellSize / 2}px`,
                  top: `${rowIndex * cellSize + cellSize / 2}px`,
                }}
                onClick={() => handleClick(rowIndex, colIndex)}
              />
            ) : null
          )
        )}

        {validMoves.map(([row, col]) => (
          <div
            key={`${row}-${col}`}
            className="absolute w-[45px] h-[45px] bg-green-500 opacity-50 transform -translate-x-1/2 -translate-y-1/2"
            style={{
              left: `${col * cellSize + cellSize / 2}px`,
              top: `${row * cellSize + cellSize / 2}px`,
            }}
            onClick={() => handleClick(row, col)}
          />
        ))}

        {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói */}
        {errorMessage && (
          <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 bg-red-500 text-white p-2 rounded">
            {errorMessage}
          </div>
        )}

        {/* Hi·ªÉn th·ªã l∆∞·ª£t hi·ªán t·∫°i tr√™n b√†n c·ªù */}
        <div className="absolute top-[-40px] left-1/2 transform -translate-x-1/2 bg-blue-500 text-white p-2 rounded">
          L∆∞·ª£t hi·ªán t·∫°i: {currentPlayer === "red" ? "ƒê·ªè" : "ƒêen"}
        </div>


        {/* Overlay hi·ªÉn th·ªã khi tr√≤ ch∆°i k·∫øt th√∫c */}
        {gameOver && (
          <div className="absolute inset-0 flex flex-col items-center justify-center bg-black bg-opacity-50">
            <div className="bg-white p-6 rounded shadow-lg text-center">
              <h2 className="text-2xl font-bold mb-4">Tr√≤ ch∆°i k·∫øt th√∫c!</h2>
              <p className="mb-4">
                {winner === "red" ? "ƒê·ªè" : "ƒêen"} b·ªã chi·∫øu b√≠!
              </p>
              <button
                onClick={restartGame}
                className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
              >
                Ch∆°i l·∫°i
              </button>
            </div>
          </div>
        )}
      </div>
      {/* ProfileCard b√™n ph·∫£i (ƒë·ªëi x·ª©ng) */}
      <ProfileCard />
    </div>
  );


};

export default Chessboard;
