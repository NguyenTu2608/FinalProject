package com.example.chinesechess.controller;

import com.example.chinesechess.DTO.ChatMessage;
import com.example.chinesechess.DTO.MoveDTO;
import com.example.chinesechess.model.Game;
import com.example.chinesechess.model.Position;
import com.example.chinesechess.service.GameService;
import org.springframework.context.event.EventListener;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessageHeaderAccessor;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.socket.messaging.SessionDisconnectEvent;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Controller
public class GameWebSocketController {
    private final GameService gameService;
    private final SimpMessagingTemplate messagingTemplate; // ‚úÖ Khai b√°o bi·∫øn

    // üî• D√πng constructor ƒë·ªÉ kh·ªüi t·∫°o messagingTemplate
    public GameWebSocketController(GameService gameService, SimpMessagingTemplate messagingTemplate) {
        this.gameService = gameService;
        this.messagingTemplate = messagingTemplate;
    }

    @MessageMapping("/game/join")
    public void joinGame(@Payload Map<String, Object> request) {
        System.out.println("üì© Nh·∫≠n y√™u c·∫ßu tham gia game v·ªõi ID: " + request);

        String gameId = (String) request.get("gameId");
        String playerUsername = (String) request.get("player");

        Optional<Game> optionalGame = gameService.getGameById(gameId);
        if (optionalGame.isEmpty()) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y gameId = " + gameId);
            return;
        }

        Game game = optionalGame.get();

        // üèÜ Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i ƒë√£ ·ªü trong ph√≤ng, gi·ªØ nguy√™n v·ªã tr√≠ c·ªßa h·ªç
        if (playerUsername.equals(game.getPlayerBlack()) || playerUsername.equals(game.getPlayerRed())) {
            System.out.println("üîÑ Ng∆∞·ªùi ch∆°i ƒë√£ c√≥ trong ph√≤ng, kh√¥ng thay ƒë·ªïi v·ªã tr√≠.");
        } else {
            // üèÜ N·∫øu ch∆∞a c√≥, g√°n v√†o v·ªã tr√≠ ph√π h·ª£p
            if (game.getPlayerBlack() == null) {
                game.setPlayerBlack(playerUsername);
            } else if (game.getPlayerRed() == null) {
                game.setPlayerRed(playerUsername);
            } else {
                System.out.println("‚ö† Ph√≤ng ƒë√£ ƒë·∫ßy, kh√¥ng th·ªÉ th√™m ng∆∞·ªùi ch∆°i m·ªõi.");
                return;
            }
        }

        if (game.getPlayerBlack() != null && game.getPlayerRed() != null) {
            game.setGameStatus("starting"); // Tr·∫°ng th√°i game th√†nh "starting"
        }

        gameService.updateGame(game);

        System.out.println("‚úÖ C·∫≠p nh·∫≠t ng∆∞·ªùi ch∆°i: Black=" + game.getPlayerBlack() + ", Red=" + game.getPlayerRed());

        // üèÜ G·ª≠i c·∫≠p nh·∫≠t ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng
        Map<String, Object> response = new HashMap<>();
        response.put("type", "playerUpdate");
        response.put("gameId", gameId);
        response.put("playerBlack", game.getPlayerBlack());
        response.put("playerRed", game.getPlayerRed());

        messagingTemplate.convertAndSend("/topic/game/" + gameId, response);
    }


    //san sang
    @MessageMapping("/game/ready")
    public void playerReady(@Payload Map<String, Object> request) {
        System.out.println("Nh·∫≠n tr·∫°ng th√°i s·∫µn s√†ng c·ªßa " + request);
        String gameId = (String) request.get("gameId");
        String player = (String) request.get("player");

        Optional<Game> optionalGame = gameService.getGameById(gameId);
        if (optionalGame.isEmpty()) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y gameId = " + gameId);
            return;
        }
        Game game = optionalGame.get();
        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i h·ª£p l·ªá
        if ((game.getPlayerBlack() == null || game.getPlayerRed() == null) ||
                (!game.getPlayerBlack().equals(player) && !game.getPlayerRed().equals(player))) {
            System.out.println("‚ùå Ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒë·ªß ng∆∞·ªùi.");
            return;
        }
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫µn s√†ng
        if (game.getPlayerBlack().equals(player)) {
            game.setBlackReady(true);
        } else if (game.getPlayerRed().equals(player)) {
            game.setRedReady(true);
        }
        // L∆∞u thay ƒë·ªïi v√†o database
        gameService.updateGame(game);
        // G·ª≠i c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫øn frontend
        Map<String, Object> response = new HashMap<>();
        response.put("type", "readyStatus");
        response.put("gameId", gameId);
        response.put("blackReady", game.isBlackReady());
        response.put("redReady", game.isRedReady());

        messagingTemplate.convertAndSend("/topic/game/" + gameId, response);
        System.out.println("123 " + response);

        // N·∫øu c·∫£ hai ƒë·ªÅu s·∫µn s√†ng, b·∫Øt ƒë·∫ßu game
        if (game.isBlackReady() && game.isRedReady()) {
            Map<String, Object> startGameMessage = new HashMap<>();
            startGameMessage.put("type", "gameStart");
            startGameMessage.put("message", "Game b·∫Øt ƒë·∫ßu!");
            messagingTemplate.convertAndSend("/topic/game/" + gameId, startGameMessage);
            System.out.println("G·ª≠i tin nh·∫Øn game b·∫Øt ƒë·∫ßu : " + startGameMessage);
        }
    }



    //roi phong
    @MessageMapping("/game/leave")
    public void leaveGame(@Payload Map<String, Object> request) {
        System.out.println("üì© Nh·∫≠n y√™u c·∫ßu r·ªùi ph√≤ng: " + request);

        String gameId = (String) request.get("gameId");
        String playerUsername = (String) request.get("player");

        Optional<Game> optionalGame = gameService.getGameById(gameId);
        if (optionalGame.isEmpty()) {
            System.out.println("‚ùå Game kh√¥ng t·ªìn t·∫°i!");
            return;
        }

        Game game = optionalGame.get();
        boolean isPlayerInGame = false;

        // üî• Ki·ªÉm tra v√† lo·∫°i b·ªè ng∆∞·ªùi ch∆°i kh·ªèi ph√≤ng
        if (playerUsername.equals(game.getPlayerBlack())) {
            game.setPlayerBlack(null);
            game.setCurrentTurn("black");
            game.setBlackReady(false);
            game.setGameStatus("waiting");
            game.setRedReady(false);
            game.setMoves(null);
            isPlayerInGame = true;
        } else if (playerUsername.equals(game.getPlayerRed())) {
            game.setPlayerRed(null);
            game.setRedReady(false);
            game.setBlackReady(false);
            game.setGameStatus("waiting");
            game.setCurrentTurn("black");
            game.setMoves(null);
            isPlayerInGame = true;
        }

        if (!isPlayerInGame) {
            System.out.println("‚ö† Ng∆∞·ªùi ch∆°i kh√¥ng c√≥ trong ph√≤ng!");
            return;
        }

        // üî• N·∫øu kh√¥ng c√≤n ai trong ph√≤ng => X√≥a ph√≤ng
        if (game.getPlayerBlack() == null && game.getPlayerRed() == null) {
            gameService.deleteGame(gameId);
            System.out.println("üöÄ Ph√≤ng " + gameId + " ƒë√£ ƒë∆∞·ª£c reset v√¨ kh√¥ng c√≤n ng∆∞·ªùi ch∆°i.");
        } else {
            // üî• C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i ph√≤ng n·∫øu v·∫´n c√≤n ng∆∞·ªùi ch∆°i
            gameService.updateGame(game);
            System.out.println("‚úÖ Ng∆∞·ªùi ch∆°i ƒë√£ r·ªùi ph√≤ng: " + playerUsername);
        }

        // üî• G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i
        Map<String, Object> response = new HashMap<>();
        response.put("type", "playerUpdate");
        response.put("gameId", gameId);
        response.put("playerBlack", game.getPlayerBlack());
        response.put("playerRed", game.getPlayerRed());

        messagingTemplate.convertAndSend("/topic/game/" + gameId, response);
    }

    @MessageMapping("/game/surrender")
    public void handleSurrender(@Payload Map<String, String> payload) {
        String gameId = payload.get("gameId");
        String surrenderPlayer = payload.get("surrenderPlayer");
        String winner = surrenderPlayer.equals("red") ? "black" : "red";
        System.out.println("Ng∆∞·ªùi win" + winner);

        // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i game
        Optional<Game> gameOpt = gameService.getGameById(gameId);
        if (gameOpt.isPresent()) {
            Game game = gameOpt.get();
            game.setWinner(winner);
            game.setGameStatus("finished");
            gameService.updateGame(game);
        }

        // G·ª≠i th√¥ng b√°o ƒë·∫ßu h√†ng ƒë·∫øn t·∫•t c·∫£ client trong ph√≤ng
        Map<String, Object> response = new HashMap<>();
        response.put("type", "surrender");
        response.put("surrenderPlayer", surrenderPlayer);
        response.put("winner", winner);

        messagingTemplate.convertAndSend("/topic/game/" + gameId, response);
    }

    @MessageMapping("/game/check")
    public void handleCheck(@Payload Map<String, Object> request) {
        System.out.println("üì© Nh·∫≠n th√¥ng b√°o chi·∫øu t·ª´ client: " + request);
        String gameId = (String) request.get("gameId");
        boolean isCheck = (boolean) request.get("isCheck");
        boolean isCheckmate = (boolean) request.get("isCheckmate");
        String player = (String) request.get("player");
        // G·ª≠i th√¥ng b√°o v·ªÅ cho t·∫•t c·∫£ client trong ph√≤ng


        Map<String, Object> response = new HashMap<>();
        response.put("type", "checkNotification");
        response.put("gameId", gameId);
        response.put("isCheck", isCheck);
        response.put("isCheckmate", isCheckmate);
        response.put("player", player);

        if (isCheckmate) {
            String winner = player; // Ng∆∞·ªùi chi·∫øu b√≠ l√† ng∆∞·ªùi th·∫Øng
            try {
                gameService.setWinner(gameId, winner); // ‚úÖ C·∫≠p nh·∫≠t ng∆∞·ªùi th·∫Øng trong DB
                response.put("winner", winner);
            } catch (Exception e) {
                System.err.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi th·∫Øng v√†o DB: " + e.getMessage());
            }
        }

        messagingTemplate.convertAndSend("/topic/game/" + gameId, response);

        System.out.println("üî• G·ª≠i th√¥ng b√°o chi·∫øu: " + (isCheckmate ? "Chi·∫øu b√≠!" : "Chi·∫øu t∆∞·ªõng!"));
    }


    @MessageMapping("/game/{gameId}/move")
    public void handleMove(@DestinationVariable String gameId, @Payload Map<String, Object> moveData) {
        System.out.println("üì© Nh·∫≠n n∆∞·ªõc ƒëi t·ª´ WebSocket: " + moveData);
        Optional<Game> optionalGame = gameService.getGameById(gameId);
        if (optionalGame.isEmpty()) {
            System.out.println("‚ùå Game kh√¥ng t·ªìn t·∫°i!");
            return;
        }
        Game game = optionalGame.get();
        // üî• Ki·ªÉm tra n·∫øu kh√¥ng ƒë√∫ng l∆∞·ª£t ch∆°i
        if (!moveData.get("player").equals(game.getCurrentTurn())) {
            System.out.println("‚ùå Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa " + moveData.get("player") + " (Hi·ªán t·∫°i: " + game.getCurrentTurn() + ")");
            return;
        }

        // L·∫•y v·ªã tr√≠ t·ª´ moveData (gi·∫£ s·ª≠ moveData ch·ª©a row v√† col d∆∞·ªõi d·∫°ng s·ªë nguy√™n)
        Map<String, Object> fromData = (Map<String, Object>) moveData.get("from");
        Map<String, Object> toData = (Map<String, Object>) moveData.get("to");

        // Chuy·ªÉn ƒë·ªïi th√†nh ƒë·ªëi t∆∞·ª£ng Position
        Position fromPos = new Position((int) fromData.get("row"), (int) fromData.get("col"));
        Position toPos = new Position((int) toData.get("row"), (int) toData.get("col"));

        // T·∫°o MoveDTO
        MoveDTO move = new MoveDTO(fromPos, toPos, moveData.get("piece").toString(), game.getCurrentTurn());
        if (game.getMoves() == null) {
            game.setMoves(new ArrayList<>());
        }
        game.getMoves().add(move);


        game.switchTurn();
        gameService.updateGame(game);
        moveData.put("type", "gameMove");
        moveData.put("gameId", gameId);
        moveData.put("currentTurn", game.getCurrentTurn()); // ‚úÖ C·∫≠p nh·∫≠t l∆∞·ª£t ch∆°i
        moveData.put("movedPiece", moveData.get("piece"));
        moveData.put("from", moveData.get("from"));
        moveData.put("to", moveData.get("to"));

        messagingTemplate.convertAndSend("/topic/game/" + gameId, moveData);
        System.out.println("‚úÖ G·ª≠i n∆∞·ªõc ƒëi t·ªõi WebSocket: " + moveData);
    }

    //chat
    @MessageMapping("/game/{gameId}/chat")
    public void handleChatMessage(@DestinationVariable String gameId, @Payload ChatMessage chatMessage) {
        System.out.println("üí¨ Nh·∫≠n tin nh·∫Øn chat t·ª´ " + chatMessage.getSender() + ": " + chatMessage.getContent());

        // Broadcast t·ªõi t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong game room
        messagingTemplate.convertAndSend("/topic/game/" + gameId + "/chat", chatMessage);
    }


}
